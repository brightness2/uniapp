import Interceptors, { DataResult, FailInfo, SuccessInfo } from "./interceptors.uts"

/**
 * 创建 defaultOptions
 * @returns {Map<string, any>}
 */
function defaultOptions() : Map<string, any> {
	const doMap = new Map<string, any>()
	doMap.set('baseURL', '')
	doMap.set('api', '')
	doMap.set('method', 'GET')
	doMap.set('data', {} as UTSJSONObject)
	doMap.set('header', {} as UTSJSONObject)
	return doMap
}

export { DataResult, FailInfo, SuccessInfo }

/**
 * 基于uni.request封装
 */
export class UxRequest {
	// 默认的配置选项
	defaultOptions = defaultOptions()

	// 请求的对象
	task = null as RequestTask | null

	interceptors: Interceptors = {} as Interceptors

	constructor(opts : Map<string, any>) {
		// 合并初始化传递的配置
		this.defaultOptions = this.merge(this.defaultOptions, opts)
	}

	/**
	 * 请求
	 * @param api {String} 请求的接口
	 * @param method {RequestMethod} 请求的方法
	 * @param data {UTSJSONObject | null} 请求的数据
	 * @param header UTSJSONObject | null 请求的header
	 * @returns {Promise}
	 */
	request(api : string, method : RequestMethod, data : UTSJSONObject | null, header : UTSJSONObject | null) : Promise<DataResult> {
		return new Promise((resolve, reject) => {
			this.defaultOptions.set('api', api)
			this.defaultOptions.set('method', method)
			if (data != null) {
				const doData = this.defaultOptions.get('data') as UTSJSONObject
				data.toMap().forEach((v, k) => {
					doData.set(k, v)
				})
				this.defaultOptions.set('data', doData)
			}
			if (header != null) {
				const doHeader = this.defaultOptions.get('header') as UTSJSONObject
				header.toMap().forEach((v, k) => {
					doHeader.set(k, v)
				})
				this.defaultOptions.set('header', doHeader)
			}
			this.interceptors.setReqConfig(this.defaultOptions)
			this.interceptors.request.run((config) => {
				this.defaultOptions = this.merge(this.defaultOptions, config)
				this.task = uni.request<DataResult>({
					url: `${this.defaultOptions.get('baseURL')}${this.defaultOptions.get('api')}`,
					method: this.defaultOptions.get('method') as RequestMethod,
					data: this.defaultOptions.get('data'),
					header: this.defaultOptions.get('header') as UTSJSONObject,
					success: (res) => {
						const result = {
							data: res.data as DataResult,
							statusCode: res.statusCode,
							header: res.header,
							cookies: res.cookies
						} as SuccessInfo
						
						this.interceptors.setResSuccess(result)
						this.interceptors.setResStatus(1)
						this.interceptors.response.sRun((response) => {
							resolve(response.data)
						})
					},
					fail(error) {
						const result = {
							errCode: error.errCode,
							data: error.data,
							errMsg: error.errMsg
						} as FailInfo
						this.interceptors.setResFail(result)
						this.interceptors.setResStatus(2)
						this.interceptors.response.fRun((response) => {
							reject(response)
						})
					}
				})
			})
		})
	}

	/**
	 * post请求
	 * @param api {String} 请求的接口
	 * @param data {UTSJSONObject | null} 请求的数据
	 * @param header UTSJSONObject | null 请求的header
	 * @returns {Promise}
	 */
	post(api : string, data : UTSJSONObject | null, header : UTSJSONObject | null) : Promise<DataResult> {
		return this.request(api, 'POST', data, header)
	}

	/**
	 * get请求
	 * @param api {String} 请求的接口
	 * @param data {UTSJSONObject | null} 请求的数据
	 * @param header UTSJSONObject | null 请求的header
	 * @returns {Promise}
	 */
	getData(api : string, data : UTSJSONObject | null, header : UTSJSONObject | null) : Promise<DataResult> {
		return this.request(api, 'GET', data, header)
	}

	/**
	 * 中断请求
	 */
	abort() {
		if (this.task != null) {
			this.task?.abort()
		}
	}

	/**
	 * 合并两个Map
	 * @param target {Map<string, any>} 合并的目标Map
	 * @param value {Map<string, any>} 合并的值Map
	 * @returns {Map<string, any>} 生成新的target
	 */
	merge(target : Map<string, any>, value : Map<string, any>) : Map<string, any> {
		value.forEach((v, k) => {
			if (target.has(k)) {
				target[k] = v
			}
		})
		return target
	}
}